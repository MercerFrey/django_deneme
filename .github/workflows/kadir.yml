name: Docker Deploy Production

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  
  Backend-Build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Check out code
      uses: actions/checkout@v2
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Login to Amazon ECR Public
      id: login-ecr-public
      uses: aws-actions/amazon-ecr-login@v1
      with:
        registry-type: public

    - name: Build, tag, and push docker image to Amazon ECR Public
      env:
        REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
        REGISTRY_ALIAS: u4l5p7r0
        REPOSITORY: deneme
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG
#        
        #####
#   - name: Login to Amazon ECR
#     id: login-ecr
#     uses: aws-actions/amazon-ecr-login@v1
#
#    - name: Build, tag, and push image to Amazon ECR
#      env:
#        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#        ECR_REPOSITORY: deneme
#        IMAGE_TAG: deneme
#      run: |
#        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
        
        
        
        
  EC2-Deployment:
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs: [Backend-Build]
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PEM }}
          port: ${{ secrets.EC2_PORT }}
          script: sh deploy.sh
          
  
